!function(e){var t={};function i(a){if(t[a])return t[a].exports;var r=t[a]={i:a,l:!1,exports:{}};return e[a].call(r.exports,r,r.exports,i),r.l=!0,r.exports}i.m=e,i.c=t,i.d=function(e,t,a){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:a})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var a=Object.create(null);if(i.r(a),Object.defineProperty(a,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)i.d(a,r,function(t){return e[t]}.bind(null,r));return a},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="",i(i.s=1)}([function(e,t,i){"use strict";function a(e,t,i){let a=`${e}`;for(;a.length<i;)a=t+e;return a}function r(e,t){const i=document.createElement(e);return i.id=n(t.id),i.className=n(t.className),i.innerHTML=n(t.content),i}Object.defineProperty(t,"__esModule",{value:!0}),t.buildDiv=function(e){return r("div",e)},t.buildSpan=function(e){return r("span",e)},t.buildImg=function(e){const t=document.createElement("img");return t.src=e.src,t.id=n(e.id),t.className=n(e.className),t.width=e.width||e.height,t.height=e.height||e.width,t.alt=n(e.alt),t},t.getTimeString=function(e){const t=e.getHours(),i=e.getMinutes();return`${a(t,"0",2)}:${a(i,"0",2)}`};const n=e=>e||""},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const a=i(2),r=i(3),n=i(4),d=i(5),s=i(6),l=i(7);s.deviceDataProvider.registerTimeDataProvider(a.clockUpdater),d.apiDataProvider.registerTrafficDataProvider(r.trafficUpdater),d.apiDataProvider.registerWeatherDataProvider(n.weatherUpdater),d.apiDataProvider.registerAlertsDataProvider(l.alertsUpdater),d.apiDataProvider.start()},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const a=i(0);class r{constructor(){this.clockElem=document.querySelector("#time"),this.dateElem=document.querySelector("#date")}displayTime(e){this.clockElem.textContent=a.getTimeString(e),this.dateElem.textContent=this.getDateString(e)}getDateString(e){return e.toLocaleDateString("en-UK",{day:"numeric",weekday:"short",month:"long"})}}t.ClockUpdater=r,t.clockUpdater=new r},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const a=i(0);class r{constructor(){this.elem=document.querySelector("#traffic")}displayTraffic(e){if(this.teardown(),e&&0!==e.length){for(let t=0;t<Math.min(e.length,5);t++)this.elem.appendChild(this.buildTrafficElement(e[t],t));this.show()}else this.hide()}dispose(){this.teardown(),this.hide()}buildTrafficElement(e,t){if(t<0||t>4)throw new Error(`Invalid value for traffic position. Expected 0 - 4, but got ${t}`);const i=t+1,r=a.buildDiv({className:`traffic_pane traffic_${e.congestion}`,id:`traffic_${i}`});return r.appendChild(a.buildDiv({className:"travel_time_dest",content:e.end})),r.appendChild(a.buildDiv({className:"travel_time_min",content:`${Math.ceil(e.duration/60)}`})),r.appendChild(a.buildDiv({className:"travel_time_unit",content:"mins"})),e.via?r.appendChild(a.buildDiv({className:"travel_time_via",content:e.via})):r.classList.add("no_via"),r}teardown(){this.elem.innerHTML=""}hide(){this.elem.classList.add("hidden")}show(){this.elem.classList.remove("hidden")}}t.TrafficUpdater=r,t.trafficUpdater=new r},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const a=i(0);class r{constructor(){this.elem=document.querySelector("#weather")}displayWeather(e){if(this.teardown(),!e||!e.primary)return void this.hide();if(this.elem.appendChild(this.buildMainWeatherElement(e.primary)),e.alternate&&e.alternate.length>0){const t=a.buildDiv({id:"additional_weather_list"});this.elem.appendChild(document.createElement("hr"));for(const i of e.alternate)t.appendChild(this.buildAdditionalWeatherElement(i));this.elem.appendChild(t)}const t=new Date(e.primary.updated);this.elem.appendChild(a.buildDiv({id:"weather_updated",content:a.getTimeString(t)})),this.show(),this.setBackground(e.primary.condition)}dispose(){this.teardown(),this.hide(),this.setBackground("none")}buildMainWeatherElement(e){const t=a.buildDiv({id:"main_weather"});return t.appendChild(a.buildDiv({id:"location",content:e.name})),t.appendChild(a.buildImg({id:"main_icon",src:e.iconUrl,width:100,height:100})),t.appendChild(a.buildDiv({id:"main_temp",content:`${Math.floor(e.temp.current)}°C`})),t.appendChild(a.buildDiv({id:"main_min_temp",className:"main_minmax_temp",content:`${Math.floor(e.temp.min)}°C`})),t.appendChild(a.buildDiv({id:"main_max_temp",className:"main_minmax_temp",content:`${Math.ceil(e.temp.max)}°C`})),t.appendChild(a.buildDiv({id:"main_condition",content:e.description})),t}buildAdditionalWeatherElement(e){const t=a.buildDiv({className:"additional_weather"});return t.appendChild(a.buildImg({className:"additional_img",src:e.iconUrl,width:40,height:40})),t.appendChild(a.buildSpan({className:"additional_loc",content:e.name})),t.appendChild(a.buildSpan({className:"additional_temp",content:`${Math.floor(e.temp.current)}°C`})),t.appendChild(a.buildSpan({className:"additional_high",content:`${Math.ceil(e.temp.max)}°C`})),t.appendChild(a.buildSpan({className:"additional_low",content:`${Math.floor(e.temp.min)}°C`})),t}setBackground(e){document.querySelector("#bg").className=e}teardown(){this.elem.innerHTML=""}hide(){this.elem.classList.add("hidden")}show(){this.elem.classList.remove("hidden")}}t.WeatherUpdater=r,t.weatherUpdater=new r},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.apiDataProvider=new class{registerWeatherDataProvider(e){this.weatherUpdater=e}registerTrafficDataProvider(e){this.trafficUpdater=e}registerAlertsDataProvider(e){this.alertsUpdater=e}start(){const e=async()=>{const e=await fetch("/poll"),t=await e.json();if(t.nightMode)return this.alertsUpdater&&this.alertsUpdater.dispose(),this.trafficUpdater&&this.trafficUpdater.dispose(),this.weatherUpdater&&this.weatherUpdater.dispose(),void document.getElementsByTagName("body")[0].classList.add("night");document.getElementsByTagName("body")[0].classList.remove("night"),this.alertsUpdater&&this.alertsUpdater.displayAlerts(t.alerts),this.trafficUpdater&&this.trafficUpdater.displayTraffic(t.traffic),this.weatherUpdater&&this.weatherUpdater.displayWeather(t.weather)};e(),setInterval(e,6e4)}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.deviceDataProvider=new class{registerTimeDataProvider(e){let t,i=()=>{let i=new Date,a=i.getTime();Math.floor(t/6e4)!==Math.floor(a/6e4)&&e.displayTime(i),t=a};i(),setInterval(i,500)}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const a=i(0);class r{constructor(){this.elem=document.querySelector("#alerts")}displayAlerts(e){if(this.teardown(),e&&0!==e.length){for(let t=0;t<Math.min(e.length,4);t++){const i=this.buildAlertElem(e[t],t);this.elem.appendChild(i)}this.show()}else this.hide()}dispose(){this.teardown(),this.hide()}buildAlertElem(e,t){if(t<0||t>3)throw new Error(`Invalid value for alert position. Expected 0 - 4, but got ${t}`);const i=t+1,r=a.buildDiv({className:"alert_pane",id:`alert_${i}`}),n=a.buildDiv({className:`alert_badge alert_badge_${e.color}`}),d=a.buildDiv({className:"alert_text",content:e.text});return r.appendChild(n),r.appendChild(d),r}teardown(){this.elem.innerHTML=""}hide(){this.elem.classList.add("hidden")}show(){this.elem.classList.remove("hidden")}}t.AlertsUpdater=r,t.alertsUpdater=new r}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NsaWVudC91aS11cGRhdGVyL3V0aWwudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NsaWVudC9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvY2xpZW50L3VpLXVwZGF0ZXIvY2xvY2sudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NsaWVudC91aS11cGRhdGVyL3RyYWZmaWMudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NsaWVudC91aS11cGRhdGVyL3dlYXRoZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NsaWVudC9kYXRhLXByb3ZpZGVyL2FwaS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvY2xpZW50L2RhdGEtcHJvdmlkZXIvZGV2aWNlLnRzIiwid2VicGFjazovLy8uL3NyYy9jbGllbnQvdWktdXBkYXRlci9hbGVydHMudHMiXSwibmFtZXMiOlsiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJsZWZ0UGFkIiwiaW5wdXQiLCJwYWQiLCJtaW5XaWR0aCIsIm91dHB1dCIsImxlbmd0aCIsImJ1aWxkRWxlbSIsInR5cGUiLCJvcHRpb25zIiwiZWxlbSIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImlkIiwic2FmZVN0ciIsImNsYXNzTmFtZSIsImlubmVySFRNTCIsImNvbnRlbnQiLCJpbWciLCJzcmMiLCJ3aWR0aCIsImhlaWdodCIsImFsdCIsInRpbWUiLCJob3VycyIsImdldEhvdXJzIiwibWlucyIsImdldE1pbnV0ZXMiLCJzdHIiLCJkZXZpY2VEYXRhUHJvdmlkZXIiLCJyZWdpc3RlclRpbWVEYXRhUHJvdmlkZXIiLCJjbG9ja1VwZGF0ZXIiLCJhcGlEYXRhUHJvdmlkZXIiLCJyZWdpc3RlclRyYWZmaWNEYXRhUHJvdmlkZXIiLCJ0cmFmZmljVXBkYXRlciIsInJlZ2lzdGVyV2VhdGhlckRhdGFQcm92aWRlciIsIndlYXRoZXJVcGRhdGVyIiwicmVnaXN0ZXJBbGVydHNEYXRhUHJvdmlkZXIiLCJhbGVydHNVcGRhdGVyIiwic3RhcnQiLCJDbG9ja1VwZGF0ZXIiLCJ0aGlzIiwiY2xvY2tFbGVtIiwicXVlcnlTZWxlY3RvciIsImRhdGVFbGVtIiwidGV4dENvbnRlbnQiLCJnZXRUaW1lU3RyaW5nIiwiZ2V0RGF0ZVN0cmluZyIsImRhdGUiLCJ0b0xvY2FsZURhdGVTdHJpbmciLCJkYXkiLCJ3ZWVrZGF5IiwibW9udGgiLCJUcmFmZmljVXBkYXRlciIsInRyYWZmaWMiLCJ0ZWFyZG93biIsIk1hdGgiLCJtaW4iLCJhcHBlbmRDaGlsZCIsImJ1aWxkVHJhZmZpY0VsZW1lbnQiLCJzaG93IiwiaGlkZSIsInBvc2l0aW9uIiwiRXJyb3IiLCJwb3MiLCJkaXYiLCJidWlsZERpdiIsImNvbmdlc3Rpb24iLCJlbmQiLCJjZWlsIiwiZHVyYXRpb24iLCJ2aWEiLCJjbGFzc0xpc3QiLCJhZGQiLCJyZW1vdmUiLCJXZWF0aGVyVXBkYXRlciIsIndlYXRoZXIiLCJwcmltYXJ5IiwiYnVpbGRNYWluV2VhdGhlckVsZW1lbnQiLCJhbHRlcm5hdGUiLCJhZGRpdGlvbmFsV2VhdGhlciIsImJ1aWxkQWRkaXRpb25hbFdlYXRoZXJFbGVtZW50IiwidXBkYXRlZERhdGUiLCJEYXRlIiwidXBkYXRlZCIsInNldEJhY2tncm91bmQiLCJjb25kaXRpb24iLCJidWlsZEltZyIsImljb25VcmwiLCJmbG9vciIsInRlbXAiLCJjdXJyZW50IiwibWF4IiwiZGVzY3JpcHRpb24iLCJidWlsZFNwYW4iLCJhcGlBY2Nlc3NGdW5jIiwiYXN5bmMiLCJyZXNwb25zZSIsImZldGNoIiwianNvbiIsIm5pZ2h0TW9kZSIsImRpc3Bvc2UiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImRpc3BsYXlBbGVydHMiLCJhbGVydHMiLCJkaXNwbGF5VHJhZmZpYyIsImRpc3BsYXlXZWF0aGVyIiwic2V0SW50ZXJ2YWwiLCJjdXJyZW50VGltZSIsInRlc3RGdW5jIiwibmV3RGF0ZSIsIm5ld1RpbWUiLCJnZXRUaW1lIiwiZGlzcGxheVRpbWUiLCJBbGVydHNVcGRhdGVyIiwiYWxlcnREaXYiLCJidWlsZEFsZXJ0RWxlbSIsImRhdGEiLCJiYXNlIiwiYmFkZ2UiLCJjb2xvciIsImxhYmVsIiwidGV4dCJdLCJtYXBwaW5ncyI6ImFBQ0UsSUFBSUEsRUFBbUIsR0FHdkIsU0FBU0MsRUFBb0JDLEdBRzVCLEdBQUdGLEVBQWlCRSxHQUNuQixPQUFPRixFQUFpQkUsR0FBVUMsUUFHbkMsSUFBSUMsRUFBU0osRUFBaUJFLEdBQVksQ0FDekNHLEVBQUdILEVBQ0hJLEdBQUcsRUFDSEgsUUFBUyxJQVVWLE9BTkFJLEVBQVFMLEdBQVVNLEtBQUtKLEVBQU9ELFFBQVNDLEVBQVFBLEVBQU9ELFFBQVNGLEdBRy9ERyxFQUFPRSxHQUFJLEVBR0pGLEVBQU9ELFFBS2ZGLEVBQW9CUSxFQUFJRixFQUd4Qk4sRUFBb0JTLEVBQUlWLEVBR3hCQyxFQUFvQlUsRUFBSSxTQUFTUixFQUFTUyxFQUFNQyxHQUMzQ1osRUFBb0JhLEVBQUVYLEVBQVNTLElBQ2xDRyxPQUFPQyxlQUFlYixFQUFTUyxFQUFNLENBQUVLLFlBQVksRUFBTUMsSUFBS0wsS0FLaEVaLEVBQW9Ca0IsRUFBSSxTQUFTaEIsR0FDWCxvQkFBWGlCLFFBQTBCQSxPQUFPQyxhQUMxQ04sT0FBT0MsZUFBZWIsRUFBU2lCLE9BQU9DLFlBQWEsQ0FBRUMsTUFBTyxXQUU3RFAsT0FBT0MsZUFBZWIsRUFBUyxhQUFjLENBQUVtQixPQUFPLEtBUXZEckIsRUFBb0JzQixFQUFJLFNBQVNELEVBQU9FLEdBRXZDLEdBRFUsRUFBUEEsSUFBVUYsRUFBUXJCLEVBQW9CcUIsSUFDL0IsRUFBUEUsRUFBVSxPQUFPRixFQUNwQixHQUFXLEVBQVBFLEdBQThCLGlCQUFWRixHQUFzQkEsR0FBU0EsRUFBTUcsV0FBWSxPQUFPSCxFQUNoRixJQUFJSSxFQUFLWCxPQUFPWSxPQUFPLE1BR3ZCLEdBRkExQixFQUFvQmtCLEVBQUVPLEdBQ3RCWCxPQUFPQyxlQUFlVSxFQUFJLFVBQVcsQ0FBRVQsWUFBWSxFQUFNSyxNQUFPQSxJQUN0RCxFQUFQRSxHQUE0QixpQkFBVEYsRUFBbUIsSUFBSSxJQUFJTSxLQUFPTixFQUFPckIsRUFBb0JVLEVBQUVlLEVBQUlFLEVBQUssU0FBU0EsR0FBTyxPQUFPTixFQUFNTSxJQUFRQyxLQUFLLEtBQU1ELElBQzlJLE9BQU9GLEdBSVJ6QixFQUFvQjZCLEVBQUksU0FBUzFCLEdBQ2hDLElBQUlTLEVBQVNULEdBQVVBLEVBQU9xQixXQUM3QixXQUF3QixPQUFPckIsRUFBZ0IsU0FDL0MsV0FBOEIsT0FBT0EsR0FFdEMsT0FEQUgsRUFBb0JVLEVBQUVFLEVBQVEsSUFBS0EsR0FDNUJBLEdBSVJaLEVBQW9CYSxFQUFJLFNBQVNpQixFQUFRQyxHQUFZLE9BQU9qQixPQUFPa0IsVUFBVUMsZUFBZTFCLEtBQUt1QixFQUFRQyxJQUd6Ry9CLEVBQW9Ca0MsRUFBSSxHQUlqQmxDLEVBQW9CQSxFQUFvQm1DLEVBQUksRywrQkM1RHJELFNBQVNDLEVBQVFDLEVBQXNCQyxFQUFhQyxHQUNoRCxJQUFJQyxFQUFTLEdBQUdILElBQ2hCLEtBQU9HLEVBQU9DLE9BQVNGLEdBQ25CQyxFQUFTRixFQUFNRCxFQUVuQixPQUFPRyxFQVVYLFNBQVNFLEVBQVVDLEVBQW9CQyxHQUNuQyxNQUFNQyxFQUFPQyxTQUFTQyxjQUFjSixHQUlwQyxPQUhBRSxFQUFLRyxHQUFLQyxFQUFRTCxFQUFRSSxJQUMxQkgsRUFBS0ssVUFBWUQsRUFBUUwsRUFBUU0sV0FDakNMLEVBQUtNLFVBQVlGLEVBQVFMLEVBQVFRLFNBQzFCUCxFLGlEQXZDWCxvQkFBeUJELEdBQ3JCLE9BQU9GLEVBQVUsTUFBT0UsSUFHNUIscUJBQTBCQSxHQUN0QixPQUFPRixFQUFVLE9BQVFFLElBRzdCLG9CQUF5QkEsR0FDckIsTUFBTVMsRUFBTVAsU0FBU0MsY0FBYyxPQU9uQyxPQU5BTSxFQUFJQyxJQUFNVixFQUFRVSxJQUNsQkQsRUFBSUwsR0FBS0MsRUFBUUwsRUFBUUksSUFDekJLLEVBQUlILFVBQVlELEVBQVFMLEVBQVFNLFdBQ2hDRyxFQUFJRSxNQUFRWCxFQUFRVyxPQUFTWCxFQUFRWSxPQUNyQ0gsRUFBSUcsT0FBU1osRUFBUVksUUFBVVosRUFBUVcsTUFDdkNGLEVBQUlJLElBQU1SLEVBQVFMLEVBQVFhLEtBQ25CSixHQVdYLHlCQUE4QkssR0FDMUIsTUFBTUMsRUFBUUQsRUFBS0UsV0FDYkMsRUFBT0gsRUFBS0ksYUFFbEIsTUFBTyxHQUFHMUIsRUFBUXVCLEVBQU8sSUFBSyxNQUFNdkIsRUFBUXlCLEVBQU0sSUFBSyxNQVczRCxNQUFNWixFQUFXYyxHQUFRQSxHQUFPLEksOEVDN0NoQyxhQUNBLE9BQ0EsT0FFQSxPQUNBLE9BQ0EsT0FFQSxFQUFBQyxtQkFBbUJDLHlCQUF5QixFQUFBQyxjQUU1QyxFQUFBQyxnQkFBZ0JDLDRCQUE0QixFQUFBQyxnQkFDNUMsRUFBQUYsZ0JBQWdCRyw0QkFBNEIsRUFBQUMsZ0JBQzVDLEVBQUFKLGdCQUFnQkssMkJBQTJCLEVBQUFDLGVBRTNDLEVBQUFOLGdCQUFnQk8sUyw4RUNkaEIsYUFLQSxNQUFhQyxFQUtULGNBQ0lDLEtBQUtDLFVBQVkvQixTQUFTZ0MsY0FUWCxTQVVmRixLQUFLRyxTQUFXakMsU0FBU2dDLGNBVFgsU0FZWCxZQUFZcEIsR0FDZmtCLEtBQUtDLFVBQVVHLFlBQWMsRUFBQUMsY0FBY3ZCLEdBQzNDa0IsS0FBS0csU0FBU0MsWUFBY0osS0FBS00sY0FBY3hCLEdBRzNDLGNBQWN5QixHQUNsQixPQUFPQSxFQUFLQyxtQkFBbUIsUUFBUyxDQUFDQyxJQUFJLFVBQVdDLFFBQVMsUUFBU0MsTUFBTyxVQWhCekYsaUJBb0JhLEVBQUFyQixhQUFlLElBQUlTLEcsOEVDekJoQyxhQUtBLE1BQWFhLEVBR1QsY0FDSVosS0FBSy9CLEtBQU9DLFNBQVNnQyxjQU5QLFlBU1gsZUFBZVcsR0FHbEIsR0FGQWIsS0FBS2MsV0FFQUQsR0FBOEIsSUFBbkJBLEVBQVFoRCxPQUF4QixDQUtBLElBQUssSUFBSXJDLEVBQUksRUFBR0EsRUFBSXVGLEtBQUtDLElBQUlILEVBQVFoRCxPQUFRLEdBQUlyQyxJQUM3Q3dFLEtBQUsvQixLQUFLZ0QsWUFBWWpCLEtBQUtrQixvQkFBb0JMLEVBQVFyRixHQUFJQSxJQUcvRHdFLEtBQUttQixZQVJEbkIsS0FBS29CLE9BV04sVUFDSHBCLEtBQUtjLFdBQ0xkLEtBQUtvQixPQUdELG9CQUFvQlAsRUFBa0JRLEdBQzFDLEdBQUlBLEVBQVcsR0FBS0EsRUFBVyxFQUMzQixNQUFNLElBQUlDLE1BQU0sK0RBQStERCxLQUduRixNQUFNRSxFQUFNRixFQUFXLEVBRWpCRyxFQUFNLEVBQUFDLFNBQVMsQ0FBQ25ELFVBQVcsd0JBQXdCdUMsRUFBUWEsYUFBY3RELEdBQUksV0FBV21ELE1BWTlGLE9BVkFDLEVBQUlQLFlBQVksRUFBQVEsU0FBUyxDQUFDbkQsVUFBVyxtQkFBb0JFLFFBQVNxQyxFQUFRYyxPQUMxRUgsRUFBSVAsWUFBWSxFQUFBUSxTQUFTLENBQUNuRCxVQUFXLGtCQUFtQkUsUUFBUyxHQUFHdUMsS0FBS2EsS0FBS2YsRUFBUWdCLFNBQVcsU0FDakdMLEVBQUlQLFlBQVksRUFBQVEsU0FBUyxDQUFDbkQsVUFBVyxtQkFBb0JFLFFBQVMsVUFFOURxQyxFQUFRaUIsSUFDUk4sRUFBSVAsWUFBWSxFQUFBUSxTQUFTLENBQUNuRCxVQUFXLGtCQUFtQkUsUUFBU3FDLEVBQVFpQixPQUV6RU4sRUFBSU8sVUFBVUMsSUFBSSxVQUdmUixFQUdILFdBQ0p4QixLQUFLL0IsS0FBS00sVUFBWSxHQUdsQixPQUNKeUIsS0FBSy9CLEtBQUs4RCxVQUFVQyxJQUFJLFVBR3BCLE9BQ0poQyxLQUFLL0IsS0FBSzhELFVBQVVFLE9BQU8sV0ExRG5DLG1CQThEYSxFQUFBeEMsZUFBaUIsSUFBSW1CLEcsOEVDbEVsQyxhQUtBLE1BQWFzQixFQUlULGNBQ0lsQyxLQUFLL0IsS0FBT0MsU0FBU2dDLGNBUlAsWUFXWCxlQUFlaUMsR0FHbEIsR0FGQW5DLEtBQUtjLFlBRUFxQixJQUFZQSxFQUFRQyxRQUVyQixZQURBcEMsS0FBS29CLE9BTVQsR0FGQXBCLEtBQUsvQixLQUFLZ0QsWUFBWWpCLEtBQUtxQyx3QkFBd0JGLEVBQVFDLFVBRXZERCxFQUFRRyxXQUFhSCxFQUFRRyxVQUFVekUsT0FBUyxFQUFHLENBQ25ELE1BQU0wRSxFQUFvQixFQUFBZCxTQUFTLENBQUNyRCxHQUFJLDRCQUN4QzRCLEtBQUsvQixLQUFLZ0QsWUFBWS9DLFNBQVNDLGNBQWMsT0FDN0MsSUFBSSxNQUFNVSxLQUFPc0QsRUFBUUcsVUFDckJDLEVBQWtCdEIsWUFBWWpCLEtBQUt3Qyw4QkFBOEIzRCxJQUVyRW1CLEtBQUsvQixLQUFLZ0QsWUFBWXNCLEdBRzFCLE1BQU1FLEVBQWMsSUFBSUMsS0FBS1AsRUFBUUMsUUFBUU8sU0FFN0MzQyxLQUFLL0IsS0FBS2dELFlBQVksRUFBQVEsU0FBUyxDQUFDckQsR0FBSSxrQkFBbUJJLFFBQVMsRUFBQTZCLGNBQWNvQyxNQUc5RXpDLEtBQUttQixPQUVMbkIsS0FBSzRDLGNBQWNULEVBQVFDLFFBQVFTLFdBR2hDLFVBQ0g3QyxLQUFLYyxXQUNMZCxLQUFLb0IsT0FDTHBCLEtBQUs0QyxjQUFjLFFBSWYsd0JBQXdCVCxHQUM1QixNQUFNWCxFQUFNLEVBQUFDLFNBQVMsQ0FBQ3JELEdBQUksaUJBTzFCLE9BTkFvRCxFQUFJUCxZQUFZLEVBQUFRLFNBQVMsQ0FBQ3JELEdBQUksV0FBWUksUUFBUzJELEVBQVFwRyxRQUMzRHlGLEVBQUlQLFlBQVksRUFBQTZCLFNBQVMsQ0FBQzFFLEdBQUksWUFBYU0sSUFBS3lELEVBQVFZLFFBQVNwRSxNQUFPLElBQUtDLE9BQVEsT0FDckY0QyxFQUFJUCxZQUFZLEVBQUFRLFNBQVMsQ0FBQ3JELEdBQUksWUFBYUksUUFBUyxHQUFHdUMsS0FBS2lDLE1BQU1iLEVBQVFjLEtBQUtDLGdCQUMvRTFCLEVBQUlQLFlBQVksRUFBQVEsU0FBUyxDQUFDckQsR0FBSSxnQkFBaUJFLFVBQVcsbUJBQW9CRSxRQUFTLEdBQUd1QyxLQUFLaUMsTUFBTWIsRUFBUWMsS0FBS2pDLFlBQ2xIUSxFQUFJUCxZQUFZLEVBQUFRLFNBQVMsQ0FBQ3JELEdBQUksZ0JBQWlCRSxVQUFXLG1CQUFvQkUsUUFBUyxHQUFHdUMsS0FBS2EsS0FBS08sRUFBUWMsS0FBS0UsWUFDakgzQixFQUFJUCxZQUFZLEVBQUFRLFNBQVMsQ0FBQ3JELEdBQUksaUJBQWtCSSxRQUFTMkQsRUFBUWlCLGVBQzFENUIsRUFHSCw4QkFBOEJXLEdBQ2xDLE1BQU1YLEVBQU0sRUFBQUMsU0FBUyxDQUFDbkQsVUFBVyx1QkFRakMsT0FOQWtELEVBQUlQLFlBQVksRUFBQTZCLFNBQVMsQ0FBQ3hFLFVBQVcsaUJBQWtCSSxJQUFLeUQsRUFBUVksUUFBU3BFLE1BQU8sR0FBSUMsT0FBUSxNQUNoRzRDLEVBQUlQLFlBQVksRUFBQW9DLFVBQVUsQ0FBQy9FLFVBQVcsaUJBQWtCRSxRQUFTMkQsRUFBUXBHLFFBQ3pFeUYsRUFBSVAsWUFBWSxFQUFBb0MsVUFBVSxDQUFDL0UsVUFBVyxrQkFBbUJFLFFBQVMsR0FBR3VDLEtBQUtpQyxNQUFNYixFQUFRYyxLQUFLQyxnQkFDN0YxQixFQUFJUCxZQUFZLEVBQUFvQyxVQUFVLENBQUMvRSxVQUFXLGtCQUFtQkUsUUFBUyxHQUFHdUMsS0FBS2EsS0FBS08sRUFBUWMsS0FBS0UsWUFDNUYzQixFQUFJUCxZQUFZLEVBQUFvQyxVQUFVLENBQUMvRSxVQUFXLGlCQUFrQkUsUUFBUyxHQUFHdUMsS0FBS2lDLE1BQU1iLEVBQVFjLEtBQUtqQyxZQUVyRlEsRUFHSCxjQUFjcUIsR0FDbEIzRSxTQUFTZ0MsY0F0RVEsT0FzRXdCNUIsVUFBWXVFLEVBR2pELFdBQ0o3QyxLQUFLL0IsS0FBS00sVUFBWSxHQUdsQixPQUNKeUIsS0FBSy9CLEtBQUs4RCxVQUFVQyxJQUFJLFVBR3BCLE9BQ0poQyxLQUFLL0IsS0FBSzhELFVBQVVFLE9BQU8sV0FoRm5DLG1CQW9GYSxFQUFBdEMsZUFBaUIsSUFBSXVDLEcsOEVDeENyQixFQUFBM0MsZ0JBQWtCLElBNUMvQixNQU1XLDRCQUE0QkksR0FDL0JLLEtBQUtMLGVBQWlCQSxFQUduQiw0QkFBNEJGLEdBQy9CTyxLQUFLUCxlQUFpQkEsRUFHbkIsMkJBQTJCSSxHQUM5QkcsS0FBS0gsY0FBZ0JBLEVBR2xCLFFBQ0gsTUFBTXlELEVBQWdCQyxVQUNsQixNQUFNQyxRQUFpQkMsTUFBTSxTQUN2QkMsUUFBYUYsRUFBU0UsT0FFNUIsR0FBSUEsRUFBS0MsVUFLTCxPQUpBM0QsS0FBS0gsZUFBaUJHLEtBQUtILGNBQWMrRCxVQUN6QzVELEtBQUtQLGdCQUFrQk8sS0FBS1AsZUFBZW1FLFVBQzNDNUQsS0FBS0wsZ0JBQWtCSyxLQUFLTCxlQUFlaUUsZUFDM0MxRixTQUFTMkYscUJBQXFCLFFBQVEsR0FBRzlCLFVBQVVDLElBQUksU0FJM0Q5RCxTQUFTMkYscUJBQXFCLFFBQVEsR0FBRzlCLFVBQVVFLE9BQU8sU0FFMURqQyxLQUFLSCxlQUFpQkcsS0FBS0gsY0FBY2lFLGNBQWNKLEVBQUtLLFFBQzVEL0QsS0FBS1AsZ0JBQWtCTyxLQUFLUCxlQUFldUUsZUFBZU4sRUFBSzdDLFNBQy9EYixLQUFLTCxnQkFBa0JLLEtBQUtMLGVBQWVzRSxlQUFlUCxFQUFLdkIsVUFHbkVtQixJQUVBWSxZQUFZWixFQTFDSSxRLDhFQ29CWCxFQUFBbEUsbUJBQXFCLElBcEJsQyxNQUVXLHlCQUF5QkUsR0FDNUIsSUFBSTZFLEVBRUFDLEVBQVcsS0FDWCxJQUFJQyxFQUFVLElBQUkzQixLQUNkNEIsRUFBVUQsRUFBUUUsVUFDbEJ4RCxLQUFLaUMsTUFBTW1CLEVBVk4sT0FVc0NwRCxLQUFLaUMsTUFBTXNCLEVBVmpELE1BV0xoRixFQUFha0YsWUFBWUgsR0FFN0JGLEVBQWNHLEdBR2xCRixJQUVBRixZQUFZRSxFQUFVLFEsOEVDbkI5QixhQUlBLE1BQWFLLEVBSVQsY0FDSXpFLEtBQUsvQixLQUFPQyxTQUFTZ0MsY0FQUCxXQVVYLGNBQWM2RCxHQUdqQixHQUZBL0QsS0FBS2MsV0FFQWlELEdBQTRCLElBQWxCQSxFQUFPbEcsT0FBdEIsQ0FLQSxJQUFJLElBQUlyQyxFQUFJLEVBQUdBLEVBQUl1RixLQUFLQyxJQUFJK0MsRUFBT2xHLE9BQVEsR0FBSXJDLElBQU0sQ0FDakQsTUFBTWtKLEVBQVcxRSxLQUFLMkUsZUFBZVosRUFBT3ZJLEdBQUlBLEdBQ2hEd0UsS0FBSy9CLEtBQUtnRCxZQUFZeUQsR0FHMUIxRSxLQUFLbUIsWUFURG5CLEtBQUtvQixPQVlOLFVBQ0hwQixLQUFLYyxXQUNMZCxLQUFLb0IsT0FHRCxlQUFld0QsRUFBaUJ2RCxHQUNwQyxHQUFJQSxFQUFXLEdBQUtBLEVBQVcsRUFDM0IsTUFBTSxJQUFJQyxNQUFNLDZEQUE2REQsS0FHakYsTUFBTUUsRUFBTUYsRUFBVyxFQUVqQndELEVBQU8sRUFBQXBELFNBQVMsQ0FBQ25ELFVBQVcsYUFBY0YsR0FBRyxTQUFTbUQsTUFFdER1RCxFQUFRLEVBQUFyRCxTQUFTLENBQUNuRCxVQUFXLDJCQUEyQnNHLEVBQUtHLFVBRTdEQyxFQUFRLEVBQUF2RCxTQUFTLENBQUNuRCxVQUFXLGFBQWNFLFFBQVNvRyxFQUFLSyxPQUsvRCxPQUhBSixFQUFLNUQsWUFBWTZELEdBQ2pCRCxFQUFLNUQsWUFBWStELEdBRVZILEVBR0gsV0FDSjdFLEtBQUsvQixLQUFLTSxVQUFZLEdBR2xCLE9BQ0p5QixLQUFLL0IsS0FBSzhELFVBQVVDLElBQUksVUFHcEIsT0FDSmhDLEtBQUsvQixLQUFLOEQsVUFBVUUsT0FBTyxXQXpEbkMsa0JBNkRhLEVBQUFwQyxjQUFnQixJQUFJNEUiLCJmaWxlIjoiY2xpZW50LmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDEpO1xuIiwiZXhwb3J0IHR5cGUgQnVpbGRFbGVtT3B0aW9ucyA9IHsgY29udGVudD86IHN0cmluZywgaWQ/OiBzdHJpbmcsIGNsYXNzTmFtZT86IHN0cmluZyB9O1xuZXhwb3J0IHR5cGUgQnVpbGRJbWdPcHRpb25zID0geyBzcmM6IHN0cmluZywgaWQ/OiBzdHJpbmcsIGNsYXNzTmFtZT86IHN0cmluZywgd2lkdGg/OiBudW1iZXIsIGhlaWdodD86IG51bWJlciwgYWx0Pzogc3RyaW5nfVxuXG5leHBvcnQgZnVuY3Rpb24gYnVpbGREaXYob3B0aW9uczogQnVpbGRFbGVtT3B0aW9ucyk6IEhUTUxFbGVtZW50IHtcbiAgICByZXR1cm4gYnVpbGRFbGVtKCdkaXYnLCBvcHRpb25zKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGJ1aWxkU3BhbihvcHRpb25zOiBCdWlsZEVsZW1PcHRpb25zKTogSFRNTEVsZW1lbnQge1xuICAgIHJldHVybiBidWlsZEVsZW0oJ3NwYW4nLCBvcHRpb25zKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGJ1aWxkSW1nKG9wdGlvbnM6IEJ1aWxkSW1nT3B0aW9ucyk6IEhUTUxFbGVtZW50IHtcbiAgICBjb25zdCBpbWcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbWcnKTtcbiAgICBpbWcuc3JjID0gb3B0aW9ucy5zcmM7XG4gICAgaW1nLmlkID0gc2FmZVN0cihvcHRpb25zLmlkKTtcbiAgICBpbWcuY2xhc3NOYW1lID0gc2FmZVN0cihvcHRpb25zLmNsYXNzTmFtZSk7XG4gICAgaW1nLndpZHRoID0gb3B0aW9ucy53aWR0aCB8fCBvcHRpb25zLmhlaWdodDtcbiAgICBpbWcuaGVpZ2h0ID0gb3B0aW9ucy5oZWlnaHQgfHwgb3B0aW9ucy53aWR0aDtcbiAgICBpbWcuYWx0ID0gc2FmZVN0cihvcHRpb25zLmFsdCk7XG4gICAgcmV0dXJuIGltZztcbn1cblxuZnVuY3Rpb24gbGVmdFBhZChpbnB1dDogc3RyaW5nfG51bWJlciwgcGFkOiBzdHJpbmcsIG1pbldpZHRoOiBudW1iZXIpIHtcbiAgICBsZXQgb3V0cHV0ID0gYCR7aW5wdXR9YDtcbiAgICB3aGlsZSAob3V0cHV0Lmxlbmd0aCA8IG1pbldpZHRoKSB7XG4gICAgICAgIG91dHB1dCA9IHBhZCArIGlucHV0O1xuICAgIH1cbiAgICByZXR1cm4gb3V0cHV0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0VGltZVN0cmluZyh0aW1lOiBEYXRlKSB7XG4gICAgY29uc3QgaG91cnMgPSB0aW1lLmdldEhvdXJzKCk7XG4gICAgY29uc3QgbWlucyA9IHRpbWUuZ2V0TWludXRlcygpO1xuXG4gICAgcmV0dXJuIGAke2xlZnRQYWQoaG91cnMsICcwJywgMil9OiR7bGVmdFBhZChtaW5zLCAnMCcsIDIpfWA7XG59XG5cbmZ1bmN0aW9uIGJ1aWxkRWxlbSh0eXBlOiAnZGl2J3wnc3BhbicsIG9wdGlvbnM6IEJ1aWxkRWxlbU9wdGlvbnMpOiBIVE1MRWxlbWVudCB7XG4gICAgY29uc3QgZWxlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodHlwZSk7XG4gICAgZWxlbS5pZCA9IHNhZmVTdHIob3B0aW9ucy5pZCk7XG4gICAgZWxlbS5jbGFzc05hbWUgPSBzYWZlU3RyKG9wdGlvbnMuY2xhc3NOYW1lKTtcbiAgICBlbGVtLmlubmVySFRNTCA9IHNhZmVTdHIob3B0aW9ucy5jb250ZW50KTtcbiAgICByZXR1cm4gZWxlbTtcbn1cblxuY29uc3Qgc2FmZVN0ciA9IChzdHIpID0+IHN0ciB8fCAnJzsiLCJpbXBvcnQgeyBjbG9ja1VwZGF0ZXIgfSBmcm9tICcuL3VpLXVwZGF0ZXIvY2xvY2snO1xuaW1wb3J0IHsgdHJhZmZpY1VwZGF0ZXIgfSBmcm9tICcuL3VpLXVwZGF0ZXIvdHJhZmZpYyc7XG5pbXBvcnQgeyB3ZWF0aGVyVXBkYXRlciB9IGZyb20gJy4vdWktdXBkYXRlci93ZWF0aGVyJztcblxuaW1wb3J0IHsgYXBpRGF0YVByb3ZpZGVyIH0gZnJvbSAnLi9kYXRhLXByb3ZpZGVyL2FwaSc7XG5pbXBvcnQgeyBkZXZpY2VEYXRhUHJvdmlkZXIgfSBmcm9tICcuL2RhdGEtcHJvdmlkZXIvZGV2aWNlJztcbmltcG9ydCB7IGFsZXJ0c1VwZGF0ZXIgfSBmcm9tICcuL3VpLXVwZGF0ZXIvYWxlcnRzJztcblxuZGV2aWNlRGF0YVByb3ZpZGVyLnJlZ2lzdGVyVGltZURhdGFQcm92aWRlcihjbG9ja1VwZGF0ZXIpO1xuXG5hcGlEYXRhUHJvdmlkZXIucmVnaXN0ZXJUcmFmZmljRGF0YVByb3ZpZGVyKHRyYWZmaWNVcGRhdGVyKTtcbmFwaURhdGFQcm92aWRlci5yZWdpc3RlcldlYXRoZXJEYXRhUHJvdmlkZXIod2VhdGhlclVwZGF0ZXIpO1xuYXBpRGF0YVByb3ZpZGVyLnJlZ2lzdGVyQWxlcnRzRGF0YVByb3ZpZGVyKGFsZXJ0c1VwZGF0ZXIpO1xuXG5hcGlEYXRhUHJvdmlkZXIuc3RhcnQoKTsiLCJpbXBvcnQgeyBnZXRUaW1lU3RyaW5nIH0gZnJvbSBcIi4vdXRpbFwiO1xuXG5jb25zdCBDTE9DS19TRUxFQ1RPUiA9ICcjdGltZSc7XG5jb25zdCBEQVRFX1NFTEVDVE9SID0gJyNkYXRlJztcblxuZXhwb3J0IGNsYXNzIENsb2NrVXBkYXRlciB7XG5cbiAgICBwcml2YXRlIHJlYWRvbmx5IGNsb2NrRWxlbTogSFRNTEVsZW1lbnQ7XG4gICAgcHJpdmF0ZSByZWFkb25seSBkYXRlRWxlbTogSFRNTEVsZW1lbnQ7XG5cbiAgICBwdWJsaWMgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuY2xvY2tFbGVtID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihDTE9DS19TRUxFQ1RPUik7XG4gICAgICAgIHRoaXMuZGF0ZUVsZW0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKERBVEVfU0VMRUNUT1IpO1xuICAgIH1cblxuICAgIHB1YmxpYyBkaXNwbGF5VGltZSh0aW1lOiBEYXRlKSB7XG4gICAgICAgIHRoaXMuY2xvY2tFbGVtLnRleHRDb250ZW50ID0gZ2V0VGltZVN0cmluZyh0aW1lKTtcbiAgICAgICAgdGhpcy5kYXRlRWxlbS50ZXh0Q29udGVudCA9IHRoaXMuZ2V0RGF0ZVN0cmluZyh0aW1lKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGdldERhdGVTdHJpbmcoZGF0ZTogRGF0ZSkge1xuICAgICAgICByZXR1cm4gZGF0ZS50b0xvY2FsZURhdGVTdHJpbmcoJ2VuLVVLJywge2RheTonbnVtZXJpYycsIHdlZWtkYXk6ICdzaG9ydCcsIG1vbnRoOiAnbG9uZyd9KVxuICAgIH1cbn1cblxuZXhwb3J0IGNvbnN0IGNsb2NrVXBkYXRlciA9IG5ldyBDbG9ja1VwZGF0ZXIoKTsiLCJpbXBvcnQgeyBidWlsZERpdiwgYnVpbGRJbWcsIGJ1aWxkU3BhbiB9IGZyb20gJy4vdXRpbCc7XG5pbXBvcnQgeyBUcmFmZmljIH0gZnJvbSAnLi4vbW9kZWxzL3RyYWZmaWMnO1xuXG5jb25zdCBST09UX1NFTEVDVE9SID0gXCIjdHJhZmZpY1wiO1xuXG5leHBvcnQgY2xhc3MgVHJhZmZpY1VwZGF0ZXIge1xuICAgIHByaXZhdGUgcmVhZG9ubHkgZWxlbTogSFRNTEVsZW1lbnQ7XG5cbiAgICBwdWJsaWMgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuZWxlbSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoUk9PVF9TRUxFQ1RPUik7XG4gICAgfVxuXG4gICAgcHVibGljIGRpc3BsYXlUcmFmZmljKHRyYWZmaWM/OiBUcmFmZmljW10pIHtcbiAgICAgICAgdGhpcy50ZWFyZG93bigpO1xuXG4gICAgICAgIGlmICghdHJhZmZpYyB8fCB0cmFmZmljLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgdGhpcy5oaWRlKCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IE1hdGgubWluKHRyYWZmaWMubGVuZ3RoLCA1KTsgaSsrKSB7XG4gICAgICAgICAgICB0aGlzLmVsZW0uYXBwZW5kQ2hpbGQodGhpcy5idWlsZFRyYWZmaWNFbGVtZW50KHRyYWZmaWNbaV0sIGkpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuc2hvdygpO1xuICAgIH1cblxuICAgIHB1YmxpYyBkaXNwb3NlKCkge1xuICAgICAgICB0aGlzLnRlYXJkb3duKCk7XG4gICAgICAgIHRoaXMuaGlkZSgpO1xuICAgIH1cblxuICAgIHByaXZhdGUgYnVpbGRUcmFmZmljRWxlbWVudCh0cmFmZmljOiBUcmFmZmljLCBwb3NpdGlvbjogbnVtYmVyKTogSFRNTEVsZW1lbnQge1xuICAgICAgICBpZiAocG9zaXRpb24gPCAwIHx8IHBvc2l0aW9uID4gNCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIHZhbHVlIGZvciB0cmFmZmljIHBvc2l0aW9uLiBFeHBlY3RlZCAwIC0gNCwgYnV0IGdvdCAke3Bvc2l0aW9ufWApO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgcG9zID0gcG9zaXRpb24gKyAxO1xuXG4gICAgICAgIGNvbnN0IGRpdiA9IGJ1aWxkRGl2KHtjbGFzc05hbWU6IGB0cmFmZmljX3BhbmUgdHJhZmZpY18ke3RyYWZmaWMuY29uZ2VzdGlvbn1gLCBpZDogYHRyYWZmaWNfJHtwb3N9YH0pO1xuXG4gICAgICAgIGRpdi5hcHBlbmRDaGlsZChidWlsZERpdih7Y2xhc3NOYW1lOiAndHJhdmVsX3RpbWVfZGVzdCcsIGNvbnRlbnQ6IHRyYWZmaWMuZW5kfSkpO1xuICAgICAgICBkaXYuYXBwZW5kQ2hpbGQoYnVpbGREaXYoe2NsYXNzTmFtZTogJ3RyYXZlbF90aW1lX21pbicsIGNvbnRlbnQ6IGAke01hdGguY2VpbCh0cmFmZmljLmR1cmF0aW9uIC8gNjApfWB9KSk7XG4gICAgICAgIGRpdi5hcHBlbmRDaGlsZChidWlsZERpdih7Y2xhc3NOYW1lOiAndHJhdmVsX3RpbWVfdW5pdCcsIGNvbnRlbnQ6ICdtaW5zJ30pKTtcblxuICAgICAgICBpZiAodHJhZmZpYy52aWEpIHtcbiAgICAgICAgICAgIGRpdi5hcHBlbmRDaGlsZChidWlsZERpdih7Y2xhc3NOYW1lOiAndHJhdmVsX3RpbWVfdmlhJywgY29udGVudDogdHJhZmZpYy52aWF9KSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkaXYuY2xhc3NMaXN0LmFkZCgnbm9fdmlhJyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZGl2O1xuICAgIH1cblxuICAgIHByaXZhdGUgdGVhcmRvd24oKTogdm9pZCB7XG4gICAgICAgIHRoaXMuZWxlbS5pbm5lckhUTUwgPSAnJztcbiAgICB9XG5cbiAgICBwcml2YXRlIGhpZGUoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuZWxlbS5jbGFzc0xpc3QuYWRkKCdoaWRkZW4nKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHNob3coKTogdm9pZCB7XG4gICAgICAgIHRoaXMuZWxlbS5jbGFzc0xpc3QucmVtb3ZlKCdoaWRkZW4nKTtcbiAgICB9XG59XG5cbmV4cG9ydCBjb25zdCB0cmFmZmljVXBkYXRlciA9IG5ldyBUcmFmZmljVXBkYXRlcigpOyIsImltcG9ydCB7IFdlYXRoZXJEYXRhLCBXZWF0aGVyLCBXZWF0aGVyQ29uZGl0aW9uIH0gZnJvbSAnLi4vbW9kZWxzL3dlYXRoZXInO1xuaW1wb3J0IHsgYnVpbGREaXYsIGJ1aWxkSW1nLCBidWlsZFNwYW4sIGdldFRpbWVTdHJpbmcgfSBmcm9tICcuL3V0aWwnO1xuXG5jb25zdCBST09UX1NFTEVDVE9SID0gXCIjd2VhdGhlclwiO1xuY29uc3QgTUFJTl9CR19TRUxFQ1RPUiA9IFwiI2JnXCI7XG5cbmV4cG9ydCBjbGFzcyBXZWF0aGVyVXBkYXRlciB7XG5cbiAgICBwcml2YXRlIHJlYWRvbmx5IGVsZW06IEhUTUxFbGVtZW50O1xuXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmVsZW0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFJPT1RfU0VMRUNUT1IpO1xuICAgIH1cblxuICAgIHB1YmxpYyBkaXNwbGF5V2VhdGhlcih3ZWF0aGVyPzogV2VhdGhlckRhdGEpIHtcbiAgICAgICAgdGhpcy50ZWFyZG93bigpO1xuXG4gICAgICAgIGlmICghd2VhdGhlciB8fCAhd2VhdGhlci5wcmltYXJ5KSB7XG4gICAgICAgICAgICB0aGlzLmhpZGUoKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuZWxlbS5hcHBlbmRDaGlsZCh0aGlzLmJ1aWxkTWFpbldlYXRoZXJFbGVtZW50KHdlYXRoZXIucHJpbWFyeSkpO1xuXG4gICAgICAgIGlmICh3ZWF0aGVyLmFsdGVybmF0ZSAmJiB3ZWF0aGVyLmFsdGVybmF0ZS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBjb25zdCBhZGRpdGlvbmFsV2VhdGhlciA9IGJ1aWxkRGl2KHtpZDogXCJhZGRpdGlvbmFsX3dlYXRoZXJfbGlzdFwifSk7XG4gICAgICAgICAgICB0aGlzLmVsZW0uYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaHInKSk7XG4gICAgICAgICAgICBmb3IoY29uc3QgYWx0IG9mIHdlYXRoZXIuYWx0ZXJuYXRlKSB7XG4gICAgICAgICAgICAgICAgYWRkaXRpb25hbFdlYXRoZXIuYXBwZW5kQ2hpbGQodGhpcy5idWlsZEFkZGl0aW9uYWxXZWF0aGVyRWxlbWVudChhbHQpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuZWxlbS5hcHBlbmRDaGlsZChhZGRpdGlvbmFsV2VhdGhlcik7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCB1cGRhdGVkRGF0ZSA9IG5ldyBEYXRlKHdlYXRoZXIucHJpbWFyeS51cGRhdGVkKTtcblxuICAgICAgICB0aGlzLmVsZW0uYXBwZW5kQ2hpbGQoYnVpbGREaXYoe2lkOiAnd2VhdGhlcl91cGRhdGVkJywgY29udGVudDogZ2V0VGltZVN0cmluZyh1cGRhdGVkRGF0ZSl9KSk7XG5cbiAgICAgICAgLy8gZW5zdXJlIHRoZSB3ZWF0aGVyIGlzIG5vdyBzaG93bjtcbiAgICAgICAgdGhpcy5zaG93KCk7XG5cbiAgICAgICAgdGhpcy5zZXRCYWNrZ3JvdW5kKHdlYXRoZXIucHJpbWFyeS5jb25kaXRpb24pO1xuICAgIH1cblxuICAgIHB1YmxpYyBkaXNwb3NlKCkge1xuICAgICAgICB0aGlzLnRlYXJkb3duKCk7XG4gICAgICAgIHRoaXMuaGlkZSgpO1xuICAgICAgICB0aGlzLnNldEJhY2tncm91bmQoJ25vbmUnKTtcbiAgICB9XG5cblxuICAgIHByaXZhdGUgYnVpbGRNYWluV2VhdGhlckVsZW1lbnQod2VhdGhlcjogV2VhdGhlcik6IEhUTUxFbGVtZW50IHtcbiAgICAgICAgY29uc3QgZGl2ID0gYnVpbGREaXYoe2lkOiAnbWFpbl93ZWF0aGVyJ30pO1xuICAgICAgICBkaXYuYXBwZW5kQ2hpbGQoYnVpbGREaXYoe2lkOiAnbG9jYXRpb24nLCBjb250ZW50OiB3ZWF0aGVyLm5hbWV9KSk7XG4gICAgICAgIGRpdi5hcHBlbmRDaGlsZChidWlsZEltZyh7aWQ6ICdtYWluX2ljb24nLCBzcmM6IHdlYXRoZXIuaWNvblVybCwgd2lkdGg6IDEwMCwgaGVpZ2h0OiAxMDB9KSk7XG4gICAgICAgIGRpdi5hcHBlbmRDaGlsZChidWlsZERpdih7aWQ6ICdtYWluX3RlbXAnLCBjb250ZW50OiBgJHtNYXRoLmZsb29yKHdlYXRoZXIudGVtcC5jdXJyZW50KX3CsENgfSkpO1xuICAgICAgICBkaXYuYXBwZW5kQ2hpbGQoYnVpbGREaXYoe2lkOiAnbWFpbl9taW5fdGVtcCcsIGNsYXNzTmFtZTogJ21haW5fbWlubWF4X3RlbXAnLCBjb250ZW50OiBgJHtNYXRoLmZsb29yKHdlYXRoZXIudGVtcC5taW4pfcKwQ2B9KSk7XG4gICAgICAgIGRpdi5hcHBlbmRDaGlsZChidWlsZERpdih7aWQ6ICdtYWluX21heF90ZW1wJywgY2xhc3NOYW1lOiAnbWFpbl9taW5tYXhfdGVtcCcsIGNvbnRlbnQ6IGAke01hdGguY2VpbCh3ZWF0aGVyLnRlbXAubWF4KX3CsENgfSkpO1xuICAgICAgICBkaXYuYXBwZW5kQ2hpbGQoYnVpbGREaXYoe2lkOiAnbWFpbl9jb25kaXRpb24nLCBjb250ZW50OiB3ZWF0aGVyLmRlc2NyaXB0aW9ufSkpO1xuICAgICAgICByZXR1cm4gZGl2O1xuICAgIH1cblxuICAgIHByaXZhdGUgYnVpbGRBZGRpdGlvbmFsV2VhdGhlckVsZW1lbnQod2VhdGhlcjogV2VhdGhlcik6IEhUTUxFbGVtZW50IHtcbiAgICAgICAgY29uc3QgZGl2ID0gYnVpbGREaXYoe2NsYXNzTmFtZTogJ2FkZGl0aW9uYWxfd2VhdGhlcid9KTtcblxuICAgICAgICBkaXYuYXBwZW5kQ2hpbGQoYnVpbGRJbWcoe2NsYXNzTmFtZTogJ2FkZGl0aW9uYWxfaW1nJywgc3JjOiB3ZWF0aGVyLmljb25VcmwsIHdpZHRoOiA0MCwgaGVpZ2h0OiA0MH0pKTtcbiAgICAgICAgZGl2LmFwcGVuZENoaWxkKGJ1aWxkU3Bhbih7Y2xhc3NOYW1lOiAnYWRkaXRpb25hbF9sb2MnLCBjb250ZW50OiB3ZWF0aGVyLm5hbWV9KSk7XG4gICAgICAgIGRpdi5hcHBlbmRDaGlsZChidWlsZFNwYW4oe2NsYXNzTmFtZTogJ2FkZGl0aW9uYWxfdGVtcCcsIGNvbnRlbnQ6IGAke01hdGguZmxvb3Iod2VhdGhlci50ZW1wLmN1cnJlbnQpfcKwQ2B9KSk7XG4gICAgICAgIGRpdi5hcHBlbmRDaGlsZChidWlsZFNwYW4oe2NsYXNzTmFtZTogJ2FkZGl0aW9uYWxfaGlnaCcsIGNvbnRlbnQ6IGAke01hdGguY2VpbCh3ZWF0aGVyLnRlbXAubWF4KX3CsENgfSkpO1xuICAgICAgICBkaXYuYXBwZW5kQ2hpbGQoYnVpbGRTcGFuKHtjbGFzc05hbWU6ICdhZGRpdGlvbmFsX2xvdycsIGNvbnRlbnQ6IGAke01hdGguZmxvb3Iod2VhdGhlci50ZW1wLm1pbil9wrBDYH0pKTtcblxuICAgICAgICByZXR1cm4gZGl2O1xuICAgIH1cblxuICAgIHByaXZhdGUgc2V0QmFja2dyb3VuZChjb25kaXRpb246IFdlYXRoZXJDb25kaXRpb24pIHtcbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihNQUlOX0JHX1NFTEVDVE9SKS5jbGFzc05hbWUgPSBjb25kaXRpb247XG4gICAgfVxuXG4gICAgcHJpdmF0ZSB0ZWFyZG93bigpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5lbGVtLmlubmVySFRNTCA9ICcnO1xuICAgIH1cblxuICAgIHByaXZhdGUgaGlkZSgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5lbGVtLmNsYXNzTGlzdC5hZGQoJ2hpZGRlbicpO1xuICAgIH1cblxuICAgIHByaXZhdGUgc2hvdygpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5lbGVtLmNsYXNzTGlzdC5yZW1vdmUoJ2hpZGRlbicpO1xuICAgIH1cbn1cblxuZXhwb3J0IGNvbnN0IHdlYXRoZXJVcGRhdGVyID0gbmV3IFdlYXRoZXJVcGRhdGVyKCk7IiwiaW1wb3J0IHsgV2VhdGhlclVwZGF0ZXIgfSBmcm9tIFwiLi4vdWktdXBkYXRlci93ZWF0aGVyXCI7XG5pbXBvcnQgeyBUcmFmZmljVXBkYXRlciB9IGZyb20gXCIuLi91aS11cGRhdGVyL3RyYWZmaWNcIjtcbmltcG9ydCB7IEFsZXJ0c1VwZGF0ZXIgfSBmcm9tIFwiLi4vdWktdXBkYXRlci9hbGVydHNcIjtcblxuY29uc3QgVVBEQVRFX0lOVEVSVkFMID0gNjAqMTAwMDsgLy8gMSBNaW51dGVcblxuY2xhc3MgQXBpRGF0YVByb3ZpZGVyIHtcblxuICAgIHByaXZhdGUgYWxlcnRzVXBkYXRlcj86IEFsZXJ0c1VwZGF0ZXI7XG4gICAgcHJpdmF0ZSB3ZWF0aGVyVXBkYXRlcj86IFdlYXRoZXJVcGRhdGVyO1xuICAgIHByaXZhdGUgdHJhZmZpY1VwZGF0ZXI/OiBUcmFmZmljVXBkYXRlcjtcblxuICAgIHB1YmxpYyByZWdpc3RlcldlYXRoZXJEYXRhUHJvdmlkZXIod2VhdGhlclVwZGF0ZXI6IFdlYXRoZXJVcGRhdGVyKSB7XG4gICAgICAgIHRoaXMud2VhdGhlclVwZGF0ZXIgPSB3ZWF0aGVyVXBkYXRlcjtcbiAgICB9XG5cbiAgICBwdWJsaWMgcmVnaXN0ZXJUcmFmZmljRGF0YVByb3ZpZGVyKHRyYWZmaWNVcGRhdGVyOiBUcmFmZmljVXBkYXRlcikge1xuICAgICAgICB0aGlzLnRyYWZmaWNVcGRhdGVyID0gdHJhZmZpY1VwZGF0ZXI7XG4gICAgfVxuXG4gICAgcHVibGljIHJlZ2lzdGVyQWxlcnRzRGF0YVByb3ZpZGVyKGFsZXJ0c1VwZGF0ZXI6IEFsZXJ0c1VwZGF0ZXIpIHtcbiAgICAgICAgdGhpcy5hbGVydHNVcGRhdGVyID0gYWxlcnRzVXBkYXRlcjtcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhcnQoKSB7XG4gICAgICAgIGNvbnN0IGFwaUFjY2Vzc0Z1bmMgPSBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKCcvcG9sbCcpO1xuICAgICAgICAgICAgY29uc3QganNvbiA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcblxuICAgICAgICAgICAgaWYgKGpzb24ubmlnaHRNb2RlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5hbGVydHNVcGRhdGVyICYmIHRoaXMuYWxlcnRzVXBkYXRlci5kaXNwb3NlKCk7XG4gICAgICAgICAgICAgICAgdGhpcy50cmFmZmljVXBkYXRlciAmJiB0aGlzLnRyYWZmaWNVcGRhdGVyLmRpc3Bvc2UoKTtcbiAgICAgICAgICAgICAgICB0aGlzLndlYXRoZXJVcGRhdGVyICYmIHRoaXMud2VhdGhlclVwZGF0ZXIuZGlzcG9zZSgpO1xuICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdib2R5JylbMF0uY2xhc3NMaXN0LmFkZCgnbmlnaHQnKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdib2R5JylbMF0uY2xhc3NMaXN0LnJlbW92ZSgnbmlnaHQnKTtcblxuICAgICAgICAgICAgdGhpcy5hbGVydHNVcGRhdGVyICYmIHRoaXMuYWxlcnRzVXBkYXRlci5kaXNwbGF5QWxlcnRzKGpzb24uYWxlcnRzKTtcbiAgICAgICAgICAgIHRoaXMudHJhZmZpY1VwZGF0ZXIgJiYgdGhpcy50cmFmZmljVXBkYXRlci5kaXNwbGF5VHJhZmZpYyhqc29uLnRyYWZmaWMpO1xuICAgICAgICAgICAgdGhpcy53ZWF0aGVyVXBkYXRlciAmJiB0aGlzLndlYXRoZXJVcGRhdGVyLmRpc3BsYXlXZWF0aGVyKGpzb24ud2VhdGhlcik7XG4gICAgICAgIH1cblxuICAgICAgICBhcGlBY2Nlc3NGdW5jKCk7XG5cbiAgICAgICAgc2V0SW50ZXJ2YWwoYXBpQWNjZXNzRnVuYywgVVBEQVRFX0lOVEVSVkFMKTtcbiAgICB9XG59XG5cbmV4cG9ydCBjb25zdCBhcGlEYXRhUHJvdmlkZXIgPSBuZXcgQXBpRGF0YVByb3ZpZGVyKCk7IiwiaW1wb3J0IHsgQ2xvY2tVcGRhdGVyIH0gZnJvbSBcIi4uL3VpLXVwZGF0ZXIvY2xvY2tcIjtcblxuY29uc3QgTUlOVVRFX0FTX01TID0gNjAwMDA7XG5cbmNsYXNzIERldmljZURhdGFQcm92aWRlciB7XG5cbiAgICBwdWJsaWMgcmVnaXN0ZXJUaW1lRGF0YVByb3ZpZGVyKGNsb2NrVXBkYXRlcjogQ2xvY2tVcGRhdGVyKTogdm9pZCB7XG4gICAgICAgIGxldCBjdXJyZW50VGltZTtcblxuICAgICAgICBsZXQgdGVzdEZ1bmMgPSAoKSA9PiB7XG4gICAgICAgICAgICBsZXQgbmV3RGF0ZSA9IG5ldyBEYXRlKCk7XG4gICAgICAgICAgICBsZXQgbmV3VGltZSA9IG5ld0RhdGUuZ2V0VGltZSgpO1xuICAgICAgICAgICAgaWYgKE1hdGguZmxvb3IoY3VycmVudFRpbWUgLyBNSU5VVEVfQVNfTVMpICE9PSBNYXRoLmZsb29yKG5ld1RpbWUgLyBNSU5VVEVfQVNfTVMpKSB7XG4gICAgICAgICAgICAgICAgY2xvY2tVcGRhdGVyLmRpc3BsYXlUaW1lKG5ld0RhdGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY3VycmVudFRpbWUgPSBuZXdUaW1lO1xuICAgICAgICB9XG5cbiAgICAgICAgdGVzdEZ1bmMoKTtcblxuICAgICAgICBzZXRJbnRlcnZhbCh0ZXN0RnVuYywgNTAwKTtcbiAgICB9XG59XG5cbmV4cG9ydCBjb25zdCBkZXZpY2VEYXRhUHJvdmlkZXIgPSBuZXcgRGV2aWNlRGF0YVByb3ZpZGVyKCk7IiwiaW1wb3J0IHsgQWxlcnREYXRhIH0gZnJvbSBcIi4uL21vZGVscy9hbGVydFwiO1xuaW1wb3J0IHsgYnVpbGREaXYgfSBmcm9tIFwiLi91dGlsXCI7XG5cbmNvbnN0IFJPT1RfU0VMRUNUT1IgPSBcIiNhbGVydHNcIjtcblxuZXhwb3J0IGNsYXNzIEFsZXJ0c1VwZGF0ZXIge1xuXG4gICAgcHJpdmF0ZSByZWFkb25seSBlbGVtOiBIVE1MRWxlbWVudDtcblxuICAgIHB1YmxpYyBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5lbGVtID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihST09UX1NFTEVDVE9SKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZGlzcGxheUFsZXJ0cyhhbGVydHM6IEFsZXJ0RGF0YVtdKSB7XG4gICAgICAgIHRoaXMudGVhcmRvd24oKTtcblxuICAgICAgICBpZiAoIWFsZXJ0cyB8fCBhbGVydHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICB0aGlzLmhpZGUoKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCBNYXRoLm1pbihhbGVydHMubGVuZ3RoLCA0KTsgaSsrICkge1xuICAgICAgICAgICAgY29uc3QgYWxlcnREaXYgPSB0aGlzLmJ1aWxkQWxlcnRFbGVtKGFsZXJ0c1tpXSwgaSk7XG4gICAgICAgICAgICB0aGlzLmVsZW0uYXBwZW5kQ2hpbGQoYWxlcnREaXYpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5zaG93KCk7XG4gICAgfVxuXG4gICAgcHVibGljIGRpc3Bvc2UoKSB7XG4gICAgICAgIHRoaXMudGVhcmRvd24oKTtcbiAgICAgICAgdGhpcy5oaWRlKCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBidWlsZEFsZXJ0RWxlbShkYXRhOiBBbGVydERhdGEsIHBvc2l0aW9uOiBudW1iZXIpIHtcbiAgICAgICAgaWYgKHBvc2l0aW9uIDwgMCB8fCBwb3NpdGlvbiA+IDMpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCB2YWx1ZSBmb3IgYWxlcnQgcG9zaXRpb24uIEV4cGVjdGVkIDAgLSA0LCBidXQgZ290ICR7cG9zaXRpb259YCk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBwb3MgPSBwb3NpdGlvbiArIDE7XG5cbiAgICAgICAgY29uc3QgYmFzZSA9IGJ1aWxkRGl2KHtjbGFzc05hbWU6ICdhbGVydF9wYW5lJywgaWQ6YGFsZXJ0XyR7cG9zfWB9KTtcblxuICAgICAgICBjb25zdCBiYWRnZSA9IGJ1aWxkRGl2KHtjbGFzc05hbWU6IGBhbGVydF9iYWRnZSBhbGVydF9iYWRnZV8ke2RhdGEuY29sb3J9YH0pO1xuXG4gICAgICAgIGNvbnN0IGxhYmVsID0gYnVpbGREaXYoe2NsYXNzTmFtZTogJ2FsZXJ0X3RleHQnLCBjb250ZW50OiBkYXRhLnRleHR9KTtcblxuICAgICAgICBiYXNlLmFwcGVuZENoaWxkKGJhZGdlKTtcbiAgICAgICAgYmFzZS5hcHBlbmRDaGlsZChsYWJlbCk7XG5cbiAgICAgICAgcmV0dXJuIGJhc2U7ICAgICAgICBcbiAgICB9XG5cbiAgICBwcml2YXRlIHRlYXJkb3duKCk6IHZvaWQge1xuICAgICAgICB0aGlzLmVsZW0uaW5uZXJIVE1MID0gJyc7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBoaWRlKCk6IHZvaWQge1xuICAgICAgICB0aGlzLmVsZW0uY2xhc3NMaXN0LmFkZCgnaGlkZGVuJyk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzaG93KCk6IHZvaWQge1xuICAgICAgICB0aGlzLmVsZW0uY2xhc3NMaXN0LnJlbW92ZSgnaGlkZGVuJyk7XG4gICAgfVxufVxuXG5leHBvcnQgY29uc3QgYWxlcnRzVXBkYXRlciA9IG5ldyBBbGVydHNVcGRhdGVyKCk7Il0sInNvdXJjZVJvb3QiOiIifQ==